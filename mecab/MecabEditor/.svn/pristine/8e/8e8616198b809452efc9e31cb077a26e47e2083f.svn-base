using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MecabEditor
{
    public partial class frmEditSeed : Form
    {
        //メンバ
        //private SeedInfo mySeedInfo = new SeedInfo();
        private MSeed mySeedInfo = new MSeed();
        private MSeed mySeedInfoResult = new MSeed();
        private Dictionary<String, Boolean> dicIsEdited = new Dictionary<String, Boolean>();
        private int intProcessMode = -1;            //作業モード 0:形態要素編集 1:形態要素置換情報編集
        private int intEditMode = -1;               //編集モード 0:追加 1:編集
        private int intAnalyzeMode = -1;            //表示モード 0:分析 1:学習済
        private int intReturnValue = -1;

        //品詞情報など
        private List<String> lstHinshi = new List<String>();
        private List<String> lstHinshiSub1 = new List<String>();
        private List<String> lstHinshiSub2 = new List<String>();
        private List<String> lstHinshiSub3 = new List<String>();
        private List<String> lstKatsuyo1 = new List<String>();
        private List<String> lstKatsuyo2 = new List<String>();

        private List<MSeed> lstAnalyzeSeed = new List<MSeed>();
        private List<MSeed> lstMyLearnSeed = new List<MSeed>();
        private List<MSeed> lstMyLearnSeedResult = new List<MSeed>();

        private SystemInfo sysInfo = new SystemInfo();


        public frmEditSeed()
        {
            InitializeComponent();
        }

        //Form表示後
        private void frmEditCsv_Shown(object sender, EventArgs e)
        {
            //品詞の設定
            cmbHinshi.Items.Clear();
            cmbHinshi.Items.Add(String.Empty);
            lstHinshi.ForEach(delegate(String strHinshiWork)
            {
                cmbHinshi.Items.Add(strHinshiWork);
            });
            cmbHinshi.DropDownStyle = ComboBoxStyle.DropDown;
            cmbHinshi.SelectedIndex = 0;

            //品詞詳細1の設定
            cmbHinshiDetail1.Items.Clear();
            cmbHinshiDetail1.Items.Add(String.Empty);
            lstHinshiSub1.ForEach(delegate(String strHinshiSub1Work)
            {
                cmbHinshiDetail1.Items.Add(strHinshiSub1Work);
            });
            cmbHinshiDetail1.DropDownStyle = ComboBoxStyle.DropDown;
            cmbHinshiDetail1.SelectedIndex = 0;

            //品詞詳細2の設定
            cmbHinshiDetail2.Items.Clear();
            cmbHinshiDetail2.Items.Add(String.Empty);
            lstHinshiSub2.ForEach(delegate(String strHinshiSub2Work)
            {
                cmbHinshiDetail2.Items.Add(strHinshiSub2Work);
            });
            cmbHinshiDetail2.DropDownStyle = ComboBoxStyle.DropDown;
            cmbHinshiDetail2.SelectedIndex = 0;

            //品詞詳細3の設定
            cmbHinshiDetail3.Items.Clear();
            cmbHinshiDetail3.Items.Add(String.Empty);
            lstHinshiSub3.ForEach(delegate(String strHinshiSub3Work)
            {
                cmbHinshiDetail3.Items.Add(strHinshiSub3Work);
            });
            cmbHinshiDetail3.DropDownStyle = ComboBoxStyle.DropDown;
            cmbHinshiDetail3.SelectedIndex = 0;

            //活用形の設定
            cmbKatsuyoukei.Items.Clear();
            cmbKatsuyoukei.Items.Add(String.Empty);
            lstKatsuyo1.ForEach(delegate(String strKatsuyo1Work)
            {
                cmbKatsuyoukei.Items.Add(strKatsuyo1Work);
            });
            cmbKatsuyoukei.DropDownStyle = ComboBoxStyle.DropDown;
            cmbKatsuyoukei.SelectedIndex = 0;

            //活用型の設定
            cmbKatsuyoType.Items.Clear();
            cmbKatsuyoType.Items.Add(String.Empty);
            lstKatsuyo2.ForEach(delegate(String strKatsuyo2Work)
            {
                cmbKatsuyoType.Items.Add(strKatsuyo2Work);
            });
            cmbKatsuyoType.DropDownStyle = ComboBoxStyle.DropDown;
            cmbKatsuyoType.SelectedIndex = 0;

            lstvwAnalyze.Clear();
            lstvwAnalyze.Columns.Add(XmlDatas.ListNames["HYOSO_TYPE"]);
            lstvwAnalyze.Columns.Add(XmlDatas.ListNames["HINSHI"]);
            lstvwAnalyze.Columns.Add(XmlDatas.ListNames["HINSHI_DETAIL_1"]);
            lstvwAnalyze.Columns.Add(XmlDatas.ListNames["HINSHI_DETAIL_2"]);
            lstvwAnalyze.Columns.Add(XmlDatas.ListNames["HINSHI_DETAIL_3"]);
            lstvwAnalyze.Columns.Add(XmlDatas.ListNames["KATSUYO_KEI"]);
            lstvwAnalyze.Columns.Add(XmlDatas.ListNames["KATSUYO_TYPE"]);
            lstvwAnalyze.Columns.Add(XmlDatas.ListNames["BASE_TYPE"]);
            lstvwAnalyze.Columns.Add(XmlDatas.ListNames["YOMI"]);
            lstvwAnalyze.Columns.Add(XmlDatas.ListNames["HATSUON"]);

            //編集の場合の処理
            if (intEditMode == 1)
            {
                if (!SetInfosFromMSeedToControls(mySeedInfo))
                {
                    Close();
                    return;
                }

                mySeedInfoResult = new MSeed(mySeedInfo);
            }

            ControlButtons(intProcessMode);
        }

        //保存ボタンクリック時
        private void btnSave_Click(object sender, EventArgs e)
        {
            //品詞情報の保存
            String strHinshiFilePath = XmlDatas.ListConsts["HINSHI_TXT_FILE_PATH"];
            String strHinshiFileSub1Path = XmlDatas.ListConsts["HINSHI_SUB1_TXT_FILE_PATH"];
            String strHinshiFileSub2Path = XmlDatas.ListConsts["HINSHI_SUB2_TXT_FILE_PATH"];
            String strHinshiFileSub3Path = XmlDatas.ListConsts["HINSHI_SUB3_TXT_FILE_PATH"];
            String strKatsuyouFile1Path = XmlDatas.ListConsts["KATSUYO1_TXT_FILE_PATH"];
            String strKatsuyouFile2Path = XmlDatas.ListConsts["KATSUYO2_TXT_FILE_PATH"];
            String strMyLearnCsvFilePath = sysInfo.ListMembers["CSV_DIRECTORY_PATH"].ToString() + "\\" + "mylean.csv";

            StreamWriter strwtrHinshi = null;
            StreamWriter strwtrHinshiSub1 = null;
            StreamWriter strwtrHinshiSub2 = null;
            StreamWriter strwtrHinshiSub3 = null;
            StreamWriter strwtrKatsuyou1 = null;
            StreamWriter strwtrKatsuyou2 = null;

            try
            {
                //品詞
                strwtrHinshi = new StreamWriter(@strHinshiFilePath, false, Encoding.GetEncoding("utf-8"));
                lstHinshi.ForEach(delegate(String strHinshiWork)
                {
                    strwtrHinshi.WriteLine(strHinshiWork);
                });

                //品詞詳細1
                strwtrHinshiSub1 = new StreamWriter(@strHinshiFileSub1Path, false, Encoding.GetEncoding("utf-8"));
                lstHinshiSub1.ForEach(delegate(String strHinshiSub1Work)
                {
                    strwtrHinshiSub1.WriteLine(strHinshiSub1Work);
                });

                //品詞詳細2
                strwtrHinshiSub2 = new StreamWriter(@strHinshiFileSub2Path, false, Encoding.GetEncoding("utf-8"));
                lstHinshiSub2.ForEach(delegate(String strHinshiSub2Work)
                {
                    strwtrHinshiSub2.WriteLine(strHinshiSub2Work);
                });

                //品詞詳細3
                strwtrHinshiSub3 = new StreamWriter(@strHinshiFileSub3Path, false, Encoding.GetEncoding("utf-8"));
                lstHinshiSub3.ForEach(delegate(String strHinshiSub3Work)
                {
                    strwtrHinshiSub3.WriteLine(strHinshiSub3Work);
                });

                //活用形
                strwtrKatsuyou1 = new StreamWriter(@strKatsuyouFile1Path, false, Encoding.GetEncoding("utf-8"));
                lstKatsuyo1.ForEach(delegate(String strKatsuyou1Work)
                {
                    strwtrKatsuyou1.WriteLine(strKatsuyou1Work);
                });

                //活用型
                strwtrKatsuyou2 = new StreamWriter(@strKatsuyouFile2Path, false, Encoding.GetEncoding("utf-8"));
                lstKatsuyo2.ForEach(delegate(String strKatsuyou2Work)
                {
                    strwtrKatsuyou2.WriteLine(strKatsuyou2Work);
                });

                //学習用Csv
                lstMyLearnSeedResult.Clear();
                lstMyLearnSeed.ForEach(delegate(MSeed mSeedWork)
                {
                    lstMyLearnSeedResult.Add(mSeedWork);
                });

                if (!MyUtils.outputCsvFile(strMyLearnCsvFilePath, lstMyLearnSeedResult))
                    return;
            }
            catch (IOException ioe)
            {
                MessageBox.Show(ioe.Message);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            finally
            {
                if (strwtrHinshi != null)
                {
                    strwtrHinshi.Close();
                    strwtrHinshi.Dispose();
                }

                if (strwtrHinshiSub1 != null)
                {
                    strwtrHinshiSub1.Close();
                    strwtrHinshiSub1.Dispose();
                }

                if (strwtrHinshiSub2 != null)
                {
                    strwtrHinshiSub2.Close();
                    strwtrHinshiSub2.Dispose();
                }

                if (strwtrHinshiSub3 != null)
                {
                    strwtrHinshiSub3.Close();
                    strwtrHinshiSub3.Dispose();
                }

                if (strwtrKatsuyou1 != null)
                {
                    strwtrKatsuyou1.Close();
                    strwtrKatsuyou1.Dispose();
                }

                if (strwtrKatsuyou2 != null)
                {
                    strwtrKatsuyou2.Close();
                    strwtrKatsuyou2.Dispose();
                }
            }

            intReturnValue = 1;
            mySeedInfoResult = new MSeed(mySeedInfo);

            Close();
        }

        //入力チェック
        private Boolean inputCheck()
        {
            Boolean bResult = true;
            List<String> lstMessages = new List<String>();

            //表層系
            txtHyosokei.BackColor = XmlDatas.ListColors["NORMAL_TEXT"];

            if (intProcessMode == 0)
            {
                if (txtHyosokei.Text.Length == 0)
                {
                    lstMessages.Add(String.Format(XmlDatas.ListMessages["ERROR_3"].ToString(), XmlDatas.ListNames["HYOSO_TYPE"].ToString()));
                    txtHyosokei.BackColor = XmlDatas.ListColors["ERROR_TEXT"];
                    bResult = false;
                }
            }

            //品詞
            cmbHinshi.BackColor = XmlDatas.ListColors["NORMAL_TEXT"];

            if (intProcessMode == 0)
            {
                if (cmbHinshi.Text.Length == 0)
                {
                    lstMessages.Add(String.Format(XmlDatas.ListMessages["ERROR_3"].ToString(), XmlDatas.ListNames["HINSHI"].ToString()));
                    cmbHinshi.BackColor = XmlDatas.ListColors["ERROR_TEXT"];
                    bResult = false;
                }
            }

            //品詞詳細1
            cmbHinshiDetail1.BackColor = XmlDatas.ListColors["NORMAL_TEXT"];

            if (intProcessMode == 0)
            {
                if (cmbHinshiDetail1.Text.Length == 0)
                {
                    lstMessages.Add(String.Format(XmlDatas.ListMessages["ERROR_3"].ToString(), XmlDatas.ListNames["HINSHI_DETAIL_1"].ToString()));
                    cmbHinshiDetail1.BackColor = XmlDatas.ListColors["ERROR_TEXT"];
                    bResult = false;
                }
            }

            //品詞詳細2
            cmbHinshiDetail2.BackColor = XmlDatas.ListColors["NORMAL_TEXT"];

            if (intProcessMode == 0)
            {
                if (cmbHinshiDetail2.Text.Length == 0)
                {
                    lstMessages.Add(String.Format(XmlDatas.ListMessages["ERROR_3"].ToString(), XmlDatas.ListNames["HINSHI_DETAIL_2"].ToString()));
                    cmbHinshiDetail2.BackColor = XmlDatas.ListColors["ERROR_TEXT"];
                    bResult = false;
                }
            }

            //品詞詳細3
            cmbHinshiDetail3.BackColor = XmlDatas.ListColors["NORMAL_TEXT"];

            if (intProcessMode == 0)
            {
                if (cmbHinshiDetail3.Text.Length == 0)
                {
                    lstMessages.Add(String.Format(XmlDatas.ListMessages["ERROR_3"].ToString(), XmlDatas.ListNames["HINSHI_DETAIL_3"].ToString()));
                    cmbHinshiDetail3.BackColor = XmlDatas.ListColors["ERROR_TEXT"];
                    bResult = false;
                }
            }

            //活用形
            cmbKatsuyoukei.BackColor = XmlDatas.ListColors["NORMAL_TEXT"];

            if (intProcessMode == 0)
            {
                if (cmbKatsuyoukei.Text.Length == 0)
                {
                    lstMessages.Add(String.Format(XmlDatas.ListMessages["ERROR_3"].ToString(), XmlDatas.ListNames["KATSUYO_KEI"].ToString()));
                    cmbKatsuyoukei.BackColor = XmlDatas.ListColors["ERROR_TEXT"];
                    bResult = false;
                }
            }

            //活用型
            cmbKatsuyoType.BackColor = XmlDatas.ListColors["NORMAL_TEXT"];

            if (intProcessMode == 0)
            {
                if (cmbKatsuyoukei.Text.Length == 0)
                {
                    lstMessages.Add(String.Format(XmlDatas.ListMessages["ERROR_3"].ToString(), XmlDatas.ListNames["KATSUYO_TYPE"].ToString()));
                    cmbKatsuyoType.BackColor = XmlDatas.ListColors["ERROR_TEXT"];
                    bResult = false;
                }
            }

            //基本型
            txtBaseType.BackColor = XmlDatas.ListColors["NORMAL_TEXT"];

            if (intProcessMode == 0)
            {
                if (txtBaseType.Text.Length == 0)
                {
                    lstMessages.Add(String.Format(XmlDatas.ListMessages["ERROR_3"].ToString(), XmlDatas.ListNames["BASE_TYPE"].ToString()));
                    txtBaseType.BackColor = XmlDatas.ListColors["ERROR_TEXT"];
                    bResult = false;
                }
            }

            //読み(読みは未入力を認める)
            //txtYomi.BackColor = XmlDatas.ListColors["NORMAL_TEXT"];

            //if (txtYomi.Text.Length == 0)
            //{
                //lstMessages.Add(String.Format(XmlDatas.ListMessages["ERROR_3"].ToString(), XmlDatas.ListNames["YOMI"].ToString()));
                //txtYomi.BackColor = XmlDatas.ListColors["ERROR_TEXT"];
                //bResult = false;
            //}

            //発音(発音は未入力を認める)
            //txtHatsuon.BackColor = XmlDatas.ListColors["NORMAL_TEXT"];

            //if (txtHatsuon.Text.Length == 0)
            //{
                //lstMessages.Add(String.Format(XmlDatas.ListMessages["ERROR_3"].ToString(), XmlDatas.ListNames["HATSUON"].ToString()));
                //txtHatsuon.BackColor = XmlDatas.ListColors["ERROR_TEXT"];
                //bResult = false;
            //}

            if (intProcessMode == 1)
            {
                if (cmbHinshi.Text.Length == 0 && cmbHinshiDetail1.Text.Length == 0 && cmbHinshiDetail2.Text.Length == 0 && cmbHinshiDetail3.Text.Length == 0 && cmbKatsuyoukei.Text.Length == 0 && cmbKatsuyoukei.Text.Length == 0 && txtBaseType.Text.Length == 0)
                {
                    lstMessages.Add((XmlDatas.ListMessages["ERROR_6"].ToString()));
                    cmbHinshi.BackColor = XmlDatas.ListColors["ERROR_TEXT"];
                    cmbHinshiDetail1.BackColor = XmlDatas.ListColors["ERROR_TEXT"];
                    cmbHinshiDetail2.BackColor = XmlDatas.ListColors["ERROR_TEXT"];
                    cmbHinshiDetail3.BackColor = XmlDatas.ListColors["ERROR_TEXT"];
                    cmbKatsuyoukei.BackColor = XmlDatas.ListColors["ERROR_TEXT"];
                    cmbKatsuyoType.BackColor = XmlDatas.ListColors["ERROR_TEXT"];
                    txtBaseType.BackColor = XmlDatas.ListColors["ERROR_TEXT"];
                    bResult = false;
                }
            }

            String strMessage = String.Empty;
            if (!bResult)
            {
                lstMessages.ForEach(delegate(String strMessageWork)
                {
                    strMessage = strMessage + strMessageWork + "\n";
                });
                MessageBox.Show(strMessage);
            }

            return bResult;
        }

        //閉じるボタンクリック時
        private void btnClose_Click(object sender, EventArgs e)
        {
            mySeedInfo = new MSeed(mySeedInfoResult);

            Close();
        }

        //getter, setter

        //Seed情報
        //public SeedInfo MySeedInfo
        public MSeed MySeedInfo
        {
            get { return mySeedInfo; }
            set { mySeedInfo = value; }
        }

        //品詞リスト
        public List<String> ListHinshi
        {
            get { return lstHinshi; }
            set { lstHinshi = value; }
        }

        //品詞詳細1リスト
        public List<String> ListHinshiSub1
        {
            get { return lstHinshiSub1; }
            set { lstHinshiSub1 = value; }
        }

        //品詞詳細2リスト
        public List<String> ListHinshiSub2
        {
            get { return lstHinshiSub2; }
            set { lstHinshiSub2 = value; }
        }

        //品詞詳細3リスト
        public List<String> ListHinshiSub3
        {
            get { return lstHinshiSub3; }
            set { lstHinshiSub3 = value; }
        }

        //活用形リスト
        public List<String> ListKatsuyo1
        {
            get { return lstKatsuyo1; }
            set { lstKatsuyo1 = value; }
        }

        //活用型リスト
        public List<String> ListKatsuyo2
        {
            get { return lstKatsuyo2; }
            set { lstKatsuyo2 = value; }
        }

        //作業モード
        public int ProcessMode
        {
            set { intProcessMode = value; }
        }

        //編集モード
        public int EditMode
        {
            get { return intEditMode; }
            set { intEditMode = value; }
        }

        //学習用リスト
        public List<MSeed> ListMyLearnSeed
        {
            set { lstMyLearnSeed = value; }
        }

        //学習用リスト(保存用)
        public List<MSeed> ListMyLearnSeedResult
        {
            get { return lstMyLearnSeedResult; }
        }

        //返り値
        public int ReturnValue
        {
            get { return intReturnValue; }
            set { intReturnValue = value; }
        }

        //システム情報
        public SystemInfo systemInfo
        {
            set { sysInfo = value; }
        }

        //編集結果
        public MSeed MySeedInfoResult
        {
            get { return mySeedInfoResult; }
            set { mySeedInfoResult = value; }
        }

        //解析開始
        private void btnAnalyze_Click(object sender, EventArgs e)
        {
            String strBatchWork = Application.StartupPath + "\\" + "temp.bat";
            String strSourceWork = Application.StartupPath + "\\" + "temp.txt";
            String strDistWork = Application.StartupPath + "\\" + "tempdist.txt";
            
            StreamWriter strwtrBatchWork = null;
            StreamWriter strwtrSourceWork = null;
            StreamReader strrdrDistWork = null;

            try
            {
                strwtrSourceWork = new StreamWriter(@strSourceWork, false, Encoding.GetEncoding("utf-8"));
                strwtrSourceWork.WriteLine(txtHyosokei.Text);
                strwtrSourceWork.Close();

                strwtrBatchWork = new StreamWriter(@strBatchWork, false, Encoding.GetEncoding("sjis"));
                strwtrBatchWork.WriteLine("C:\\MeCab\\bin\\mecab.exe -a " + strSourceWork + " -o " + strDistWork);
                strwtrBatchWork.WriteLine("Exit");
                strwtrBatchWork.Close();

                var startInfo = new ProcessStartInfo();
                startInfo.FileName = System.Environment.GetEnvironmentVariable("ComSpec");
                startInfo.CreateNoWindow = true;
                startInfo.UseShellExecute = false;
                startInfo.Arguments = "/c " + @strBatchWork;

                Process process = Process.Start(startInfo);
                process.WaitForExit();
                process.Close();

                strrdrDistWork = new StreamReader(@strDistWork, Encoding.GetEncoding("utf-8"));
                int intCountWork = 0;
                String strLineWork = String.Empty;
                lstAnalyzeSeed.Clear();
                while (!strrdrDistWork.EndOfStream)
                {
                    strLineWork = strrdrDistWork.ReadLine();

                    if (intCountWork > 0)
                    {
                        MSeed seedWork = new MSeed();
                        if (seedWork.getFromCsvFile(strLineWork))
                        {
                            lstAnalyzeSeed.Add(seedWork);
                        }
                    }

                    intCountWork++;
                }

                intAnalyzeMode = 0;
                lstvwAnalyze.Items.Clear();
                lstAnalyzeSeed.ForEach(delegate(MSeed seedWork)
                {
                    String[] strLineList = { seedWork.DictionaryMembers[XmlDatas.ListItemNames["HYOSO_TYPE"]].ToString(), seedWork.DictionaryMembers[XmlDatas.ListItemNames["HINSHI"]].ToString(), seedWork.DictionaryMembers[XmlDatas.ListItemNames["HINSHI_DETAIL_1"]].ToString(), seedWork.DictionaryMembers[XmlDatas.ListItemNames["HINSHI_DETAIL_2"]].ToString(), seedWork.DictionaryMembers[XmlDatas.ListItemNames["HINSHI_DETAIL_3"]].ToString(), seedWork.DictionaryMembers[XmlDatas.ListItemNames["KATSUYO_KEI"]].ToString(), seedWork.DictionaryMembers[XmlDatas.ListItemNames["KATSUYO_TYPE"]].ToString(), seedWork.DictionaryMembers[XmlDatas.ListItemNames["BASE_TYPE"]].ToString(), seedWork.DictionaryMembers[XmlDatas.ListItemNames["YOMI"]].ToString(), seedWork.DictionaryMembers[XmlDatas.ListItemNames["HATSUON"]].ToString() };
                    lstvwAnalyze.Items.Add(new ListViewItem(strLineList));
                });
            }
            catch (IOException ioe)
            {
                MessageBox.Show(ioe.Message);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            finally
            {
                if (strwtrBatchWork != null)
                {
                    strwtrBatchWork.Close();
                    strwtrBatchWork.Dispose();
                }

                if (strwtrSourceWork != null)
                {
                    strwtrSourceWork.Close();
                    strwtrSourceWork.Dispose();
                }

                if (strrdrDistWork != null)
                {
                    strrdrDistWork.Close();
                    strrdrDistWork.Dispose();
                }
            }
        }

        //追加ボタン
        private void btnAdd_Click(object sender, EventArgs e)
        {
            if (inputCheck())
            {
                //Seed情報設定
                mySeedInfo.DictionaryMembers["HYOSO_TYPE"] = txtHyosokei.Text;
                mySeedInfo.DictionaryMembers["HINSHI"] = cmbHinshi.Text;
                mySeedInfo.DictionaryMembers["HINSHI_DETAIL_1"] = cmbHinshiDetail1.Text;
                mySeedInfo.DictionaryMembers["HINSHI_DETAIL_2"] = cmbHinshiDetail2.Text;
                mySeedInfo.DictionaryMembers["HINSHI_DETAIL_3"] = cmbHinshiDetail3.Text;
                mySeedInfo.DictionaryMembers["KATSUYO_KEI"] = cmbKatsuyoukei.Text;
                mySeedInfo.DictionaryMembers["KATSUYO_TYPE"] = cmbKatsuyoType.Text;
                mySeedInfo.DictionaryMembers["BASE_TYPE"] = txtBaseType.Text;
                mySeedInfo.DictionaryMembers["YOMI"] = txtYomi.Text;
                mySeedInfo.DictionaryMembers["HATSUON"] = txtHatsuon.Text;

                if (intProcessMode == 0)
                {
                    if (IsAlreadyExist(mySeedInfo))
                        return;
                }

                //品詞リストにないものがあれば追加しておく。
                Boolean bHit = false;

                lstHinshi.ForEach(delegate(String strHinshiWork)
                {
                    if (strHinshiWork.Equals(mySeedInfo.DictionaryMembers[XmlDatas.ListItemNames["HINSHI"]].ToString()))
                        bHit = true;
                });

                if (!bHit)
                {
                    lstHinshi.Add(mySeedInfo.DictionaryMembers[XmlDatas.ListItemNames["HINSHI"]].ToString());
                    cmbHinshi.Items.Add(mySeedInfo.DictionaryMembers[XmlDatas.ListItemNames["HINSHI"]].ToString());
                }

                //品詞詳細1リストにないものがあれば追加しておく
                bHit = false;

                lstHinshiSub1.ForEach(delegate(String strHinshiSub1Work)
                {
                    if (strHinshiSub1Work.Equals(mySeedInfo.DictionaryMembers[XmlDatas.ListItemNames["HINSHI_DETAIL_1"]].ToString()))
                        bHit = true;
                });

                if (!bHit)
                {
                    lstHinshiSub1.Add(mySeedInfo.DictionaryMembers[XmlDatas.ListItemNames["HINSHI_DETAIL_1"]].ToString());
                    cmbHinshiDetail1.Items.Add(mySeedInfo.DictionaryMembers[XmlDatas.ListItemNames["HINSHI_DETAIL_1"]].ToString());
                }

                //品詞詳細2リストにないものがあれば追加しておく
                bHit = false;

                lstHinshiSub2.ForEach(delegate(String strHinshiSub2Work)
                {
                    if (strHinshiSub2Work.Equals(mySeedInfo.DictionaryMembers[XmlDatas.ListItemNames["HINSHI_DETAIL_2"]].ToString()))
                        bHit = true;
                });

                if (!bHit)
                {
                    lstHinshiSub2.Add(mySeedInfo.DictionaryMembers[XmlDatas.ListItemNames["HINSHI_DETAIL_2"]].ToString());
                    cmbHinshiDetail2.Items.Add(mySeedInfo.DictionaryMembers[XmlDatas.ListItemNames["HINSHI_DETAIL_2"]].ToString());
                }

                //品詞詳細3リストにないものがあれば追加しておく
                bHit = false;

                lstHinshiSub3.ForEach(delegate(String strHinshiSub3Work)
                {
                    if (strHinshiSub3Work.Equals(mySeedInfo.DictionaryMembers[XmlDatas.ListItemNames["HINSHI_DETAIL_3"]].ToString()))
                        bHit = true;
                });

                if (!bHit)
                {
                    lstHinshiSub3.Add(mySeedInfo.DictionaryMembers[XmlDatas.ListItemNames["HINSHI_DETAIL_3"]].ToString());
                    cmbHinshiDetail3.Items.Add(mySeedInfo.DictionaryMembers[XmlDatas.ListItemNames["HINSHI_DETAIL_3"]].ToString());
                }

                //活用形リストにないものがあれば追加しておく
                bHit = false;

                lstKatsuyo1.ForEach(delegate(String strKatsuyo1Work)
                {
                    if (strKatsuyo1Work.Equals(mySeedInfo.DictionaryMembers[XmlDatas.ListItemNames["KATSUYO_KEI"]].ToString()))
                        bHit = true;
                });

                if (!bHit)
                {
                    lstKatsuyo1.Add(mySeedInfo.DictionaryMembers[XmlDatas.ListItemNames["KATSUYO_KEI"]].ToString());
                    cmbKatsuyoukei.Items.Add(mySeedInfo.DictionaryMembers[XmlDatas.ListItemNames["KATSUYO_KEI"]].ToString());
                }

                //活用型リストにないものがあれば追加しておく
                bHit = false;

                lstKatsuyo2.ForEach(delegate(String strKatsuyo2Work)
                {
                    if (strKatsuyo2Work.Equals(mySeedInfo.DictionaryMembers[XmlDatas.ListItemNames["KATSUYO_TYPE"]].ToString()))
                        bHit = true;
                });

                if (!bHit)
                {
                    lstKatsuyo2.Add(mySeedInfo.DictionaryMembers[XmlDatas.ListItemNames["KATSUYO_TYPE"]].ToString());
                    cmbKatsuyoType.Items.Add(mySeedInfo.DictionaryMembers[XmlDatas.ListItemNames["KATSUYO_TYPE"]].ToString());
                }

                if (intProcessMode == 0)
                {
                    //学習用の形態要素リストに追加
                    lstMyLearnSeed.Add(mySeedInfo);
                }
                else
                {
                    //Seed情報設定
                    intReturnValue = 1;
                    mySeedInfoResult = new MSeed(mySeedInfo);

                    Close();
                }
            }
        }

        //解析リストか、学習用のリストにないことを確認する
        private Boolean IsAlreadyExist(MSeed mSeedWork)
        {
            Boolean bResult = false;
            Boolean bHit = false;

            lstAnalyzeSeed.ForEach(delegate(MSeed mSeedDel)
            {
                if (mSeedWork.DictionaryMembers["HYOSO_TYPE"].ToString().Equals(mSeedDel.DictionaryMembers["HYOSO_TYPE"].ToString()) && mSeedWork.DictionaryMembers["HINSHI"].ToString().Equals(mSeedDel.DictionaryMembers["HINSHI"].ToString()))
                    bHit = true;
            });

            if (bHit)
            {
                MessageBox.Show(String.Format(XmlDatas.ListMessages["ERROR_5"].ToString(), XmlDatas.ListNames["MORPHEME"].ToString()));
                bResult = true;
            }

            bHit = false;
            lstMyLearnSeed.ForEach(delegate(MSeed mSeedDel)
            {
                if (mSeedWork.DictionaryMembers["HYOSO_TYPE"].ToString().Equals(mSeedDel.DictionaryMembers["HYOSO_TYPE"].ToString()) && mSeedWork.DictionaryMembers["HINSHI"].ToString().Equals(mSeedDel.DictionaryMembers["HINSHI"].ToString()))
                    bHit = true;
            });

            if (bHit)
            {
                MessageBox.Show(String.Format(XmlDatas.ListMessages["ERROR_5"].ToString(), XmlDatas.ListNames["MORPHEME"].ToString()));
                bResult = true;
            }

            return bResult;
        }


        //選択をクリック時
        private void btnSelect_Click(object sender, EventArgs e)
        {
            if (lstvwAnalyze.SelectedItems.Count != 1)
            {
                MessageBox.Show(String.Format(XmlDatas.ListMessages["ERROR_4"].ToString(), XmlDatas.ListNames["MORPHEME"].ToString(), "1"));
                return;
            }

            MSeed seedWork = new MSeed();
            if (intAnalyzeMode == 0)
                seedWork = lstAnalyzeSeed[lstvwAnalyze.SelectedItems[0].Index];
            else
                seedWork = lstMyLearnSeed[lstvwAnalyze.SelectedItems[0].Index];

            if (!SetInfosFromMSeedToControls(seedWork))
                return;
        }

        //MSeedの情報を基に、各コントロールに値を設定する
        private Boolean SetInfosFromMSeedToControls(MSeed seedSetInfo)
        {
            Boolean bResult = false;

            txtHyosokei.Text = seedSetInfo.DictionaryMembers[XmlDatas.ListItemNames["HYOSO_TYPE"]].ToString();
            txtLeftConnectStatusNo.Text = seedSetInfo.DictionaryMembers[XmlDatas.ListItemNames["LEFT_CONNECT_STATUS_NO"]].ToString();
            txtRightConnectStatusNo.Text = seedSetInfo.DictionaryMembers[XmlDatas.ListItemNames["RIGHT_CONNECT_STATUS_NO"]].ToString();
            txtCost.Text = seedSetInfo.DictionaryMembers[XmlDatas.ListItemNames["COST"]].ToString();

            //品詞
            int intSelected = -1;
            intSelected = lstHinshi.IndexOf(seedSetInfo.DictionaryMembers[XmlDatas.ListItemNames["HINSHI"]].ToString());

            if (intSelected > -1)
                cmbHinshi.SelectedIndex = intSelected + 1;
            else
            {
                lstHinshi.Add(seedSetInfo.DictionaryMembers[XmlDatas.ListItemNames["HINSHI"]].ToString());
                cmbHinshi.Items.Add(seedSetInfo.DictionaryMembers[XmlDatas.ListItemNames["HINSHI"]].ToString());
                cmbHinshi.SelectedIndex = cmbHinshi.Items.Count - 1;
            }

            //品詞詳細1
            intSelected = -1;
            intSelected = lstHinshiSub1.IndexOf(seedSetInfo.DictionaryMembers[XmlDatas.ListItemNames["HINSHI_DETAIL_1"]].ToString());

            if (intSelected > -1)
                cmbHinshiDetail1.SelectedIndex = intSelected + 1;
            else
            {
                lstHinshiSub1.Add(seedSetInfo.DictionaryMembers[XmlDatas.ListItemNames["HINSHI_DETAIL_1"]].ToString());
                cmbHinshiDetail1.Items.Add(seedSetInfo.DictionaryMembers[XmlDatas.ListItemNames["HINSHI_DETAIL_1"]].ToString());
                cmbHinshiDetail1.SelectedIndex = cmbHinshiDetail1.Items.Count - 1;
            }

            //品詞詳細2
            intSelected = -1;
            intSelected = lstHinshiSub2.IndexOf(seedSetInfo.DictionaryMembers[XmlDatas.ListItemNames["HINSHI_DETAIL_2"]].ToString());

            if (intSelected > -1)
                cmbHinshiDetail2.SelectedIndex = intSelected + 1;
            else
            {
                lstHinshiSub2.Add(seedSetInfo.DictionaryMembers[XmlDatas.ListItemNames["HINSHI_DETAIL_2"]].ToString());
                cmbHinshiDetail2.Items.Add(seedSetInfo.DictionaryMembers[XmlDatas.ListItemNames["HINSHI_DETAIL_2"]].ToString());
                cmbHinshiDetail2.SelectedIndex = cmbHinshiDetail2.Items.Count - 1;
            }

            //品詞詳細3
            intSelected = -1;
            intSelected = lstHinshiSub3.IndexOf(seedSetInfo.DictionaryMembers[XmlDatas.ListItemNames["HINSHI_DETAIL_3"]].ToString());

            if (intSelected > -1)
                cmbHinshiDetail3.SelectedIndex = intSelected + 1;
            else
            {
                lstHinshiSub3.Add(seedSetInfo.DictionaryMembers[XmlDatas.ListItemNames["HINSHI_DETAIL_3"]].ToString());
                cmbHinshiDetail3.Items.Add(seedSetInfo.DictionaryMembers[XmlDatas.ListItemNames["HINSHI_DETAIL_3"]].ToString());
                cmbHinshiDetail3.SelectedIndex = cmbHinshiDetail3.Items.Count - 1;
            }

            //活用形
            intSelected = -1;
            intSelected = lstKatsuyo1.IndexOf(seedSetInfo.DictionaryMembers[XmlDatas.ListItemNames["KATSUYO_KEI"]].ToString());

            if (intSelected > -1)
                cmbKatsuyoukei.SelectedIndex = intSelected + 1;
            else
            {
                lstKatsuyo1.Add(seedSetInfo.DictionaryMembers[XmlDatas.ListItemNames["KATSUYO_KEI"]].ToString());
                cmbKatsuyoukei.Items.Add(seedSetInfo.DictionaryMembers[XmlDatas.ListItemNames["KATSUYO_KEI"]].ToString());
                cmbKatsuyoukei.SelectedIndex = cmbKatsuyoukei.Items.Count - 1;
            }

            //活用型
            intSelected = -1;
            intSelected = lstKatsuyo2.IndexOf(seedSetInfo.DictionaryMembers[XmlDatas.ListItemNames["KATSUYO_TYPE"]].ToString());

            if (intSelected > -1)
                cmbKatsuyoType.SelectedIndex = intSelected + 1;
            else
            {
                lstKatsuyo2.Add(seedSetInfo.DictionaryMembers[XmlDatas.ListItemNames["KATSUYO_TYPE"]].ToString());
                cmbKatsuyoType.Items.Add(seedSetInfo.DictionaryMembers[XmlDatas.ListItemNames["KATSUYO_TYPE"]].ToString());
                cmbKatsuyoType.SelectedIndex = cmbKatsuyoType.Items.Count - 1;
            }

            txtBaseType.Text = seedSetInfo.DictionaryMembers[XmlDatas.ListItemNames["BASE_TYPE"]].ToString();
            txtYomi.Text = seedSetInfo.DictionaryMembers[XmlDatas.ListItemNames["YOMI"]].ToString();
            txtHatsuon.Text = seedSetInfo.DictionaryMembers[XmlDatas.ListItemNames["HATSUON"]].ToString();

            bResult = true;

            return bResult;
        }

        //設定
        private void btnSet_Click(object sender, EventArgs e)
        {
            if (inputCheck())
            {
                //Seed情報設定
                mySeedInfo.DictionaryMembers["HYOSO_TYPE"] = txtHyosokei.Text;
                mySeedInfo.DictionaryMembers["HINSHI"] = cmbHinshi.Text;
                mySeedInfo.DictionaryMembers["HINSHI_DETAIL_1"] = cmbHinshiDetail1.Text;
                mySeedInfo.DictionaryMembers["HINSHI_DETAIL_2"] = cmbHinshiDetail2.Text;
                mySeedInfo.DictionaryMembers["HINSHI_DETAIL_3"] = cmbHinshiDetail3.Text;
                mySeedInfo.DictionaryMembers["KATSUYO_KEI"] = cmbKatsuyoukei.Text;
                mySeedInfo.DictionaryMembers["KATSUYO_TYPE"] = cmbKatsuyoType.Text;
                mySeedInfo.DictionaryMembers["BASE_TYPE"] = txtBaseType.Text;
                mySeedInfo.DictionaryMembers["YOMI"] = txtYomi.Text;
                mySeedInfo.DictionaryMembers["HATSUON"] = txtHatsuon.Text;

            }
            else
            {
                return;
            }

            intReturnValue = 1;
            mySeedInfoResult = new MSeed(mySeedInfo);

            Close();
        }

        //学習済がクリックされた場合
        private void btnLearned_Click(object sender, EventArgs e)
        {
            intAnalyzeMode = 1;

            lstvwAnalyze.Items.Clear();
            lstMyLearnSeed.ForEach(delegate(MSeed seedWork)
            {
                String[] strLineList = { seedWork.DictionaryMembers[XmlDatas.ListItemNames["HYOSO_TYPE"]].ToString(), seedWork.DictionaryMembers[XmlDatas.ListItemNames["HINSHI"]].ToString(), seedWork.DictionaryMembers[XmlDatas.ListItemNames["HINSHI_DETAIL_1"]].ToString(), seedWork.DictionaryMembers[XmlDatas.ListItemNames["HINSHI_DETAIL_2"]].ToString(), seedWork.DictionaryMembers[XmlDatas.ListItemNames["HINSHI_DETAIL_3"]].ToString(), seedWork.DictionaryMembers[XmlDatas.ListItemNames["KATSUYO_KEI"]].ToString(), seedWork.DictionaryMembers[XmlDatas.ListItemNames["KATSUYO_TYPE"]].ToString(), seedWork.DictionaryMembers[XmlDatas.ListItemNames["BASE_TYPE"]].ToString(), seedWork.DictionaryMembers[XmlDatas.ListItemNames["YOMI"]].ToString(), seedWork.DictionaryMembers[XmlDatas.ListItemNames["HATSUON"]].ToString() };
                lstvwAnalyze.Items.Add(new ListViewItem(strLineList));
            });
        }

        //ボタン制御
        //intProcWork 0:形態要素編集 1:形態要素置換情報
        private void ControlButtons(int intProcWork)
        {
            Boolean bEnabled = true;

            if (intProcWork == 1)
                bEnabled = false;

            btnSave.Enabled = bEnabled;
            btnSet.Enabled = bEnabled;
            btnSelect.Enabled = bEnabled;
        }
    }
}
